@import "compass/css3";

@import url(http://fonts.googleapis.com/css?family=Oswald:700);

$rombSize : 12;
$baseColor : #B07070;
$bottomBaseColor : darken($baseColor, 5%);
$sideLightDiff : 2%;


//NONE of the controls below are working (yet)
$rombWidth : 5.625; //em
$rombHeight : 15.25; //em

$nrFaces : 6;
$sideRotation : 360 / $nrFaces;

//degrees X rotation for each romb face
//needs to modify width and height
$rotateX : 40; //deg

//needs to be correlated with rotateX (and rombHeight)
$translateZ : $rombHeight / 6.1; //em

//after rotation, in em
$rombFaceRealHeight : sqrt(($rombHeight / 2)*($rombHeight / 2) - ($translateZ*2)*($translateZ*2));

.debug {
  rombFaceRealHeight: $rombFaceRealHeight;
} 

.romb-wrap{
  font-size: $rombSize + px;
  display: inline-block;
  width: $rombWidth + em; //90px;
  height: $rombHeight + em; //244px;
  //background: #eee;
  perspective: 62.5em; //1000px;
}
.romb {
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  transform: translateZ(0px) rotateY(0deg);
}
.romb-top,
.romb-bottom {
  position: absolute;
  width: 100%;
  height: 50%;
  transform-style: preserve-3d;
  //background: #eee;
}
.romb-bottom {
  top: 50%;
}

.romb-top-face,
.romb-bottom-face{
  width: 0;
  height: 0;
  border-style: solid;
  border-color: transparent;
  position: absolute;
  backface-visibility: hidden;
}
.romb-top-face {
  border-width: 
    0 
    $rombWidth / 2 + em
    $rombHeight / 2 + em;
  
   margin-top: -0.06 + (($rombHeight / 2 ) -  $rombFaceRealHeight ) / 2 + em;
   //margin-top: ($rotateX/2.758) / 16 + em;  
 
}
.romb-bottom-face{
  border-width: 
    $rombHeight / 2 + em
    $rombWidth / 2 + em 
    0;
  margin-top: 0.06 -(($rombHeight / 2 ) -  $rombFaceRealHeight ) / 2 + em;
  //margin-top: -$rotateX/2.758 + px;
}

@for $i from 0 through $nrFaces - 1 {
  $temp : $i + 1; // can't get this to work inline
  $ligthenPercentage : $sideLightDiff * $i;
  $middleSide : $nrFaces / 2;

  @if $i > $middleSide {
    $ligthenPercentage : $sideLightDiff * ($middleSide - ( $i - $middleSide));
  }
  
  .romb-top-face:nth-of-type(#{$temp}){
    border-bottom-color: lighten($baseColor, $ligthenPercentage);
    transform: rotateY($i*$sideRotation + deg) translateZ($translateZ + em) rotateX($rotateX + deg);
  }
   .romb-bottom-face:nth-of-type(#{$temp}){
    border-top-color: lighten($bottomBaseColor, $ligthenPercentage);
    transform: rotateY($i*$sideRotation + deg) translateZ($translateZ + em) rotateX(-$rotateX + deg);
  }

 
}

.hide {
  display: none;
}
.center-self {
  position:absolute;
  top:0;
  left:0;
  bottom:0;
  right:0;
  margin: auto;
 }

.spin {
  animation: spin .65s linear forwards infinite;
}
@keyframes spin {
    0% {
      transform:rotateY(-0deg) rotateX(0deg);
    }
    50% {
        transform:rotateY( -180deg ) rotateX(18deg);
    }
    100% {
          transform:rotateY( -360deg ) rotateX(0deg);			
      }
      
}


body {text-rendering: optimizeLegibility;}
body,input,button{-webkit-font-smoothing: antialiased;}
.center-wrap {
  width: 600px;
  max-width: 100%;
  height: 350px;
  max-height: 100%;
  text-align: center;
  
}
h1 {
  font-size: 48px;
  font-size: 3rem;
  margin-bottom: 32px;
  margin-bottom: 2rem;
  font-weight: 700;
  font-family: Oswald, sans-serif;
  text-transform: uppercase;
  
}